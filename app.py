import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from facebook_business.api import FacebookAdsApi
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.adobjects.adsinsights import AdsInsights
from facebook_business.adobjects.ad import Ad
from facebook_business.adobjects.campaign import Campaign
from facebook_business.adobjects.adset import AdSet
from PIL import Image
import requests
from io import BytesIO
import hashlib
import re
from bs4 import BeautifulSoup



# Configura√ß√£o inicial
st.set_page_config(page_title="üìä Meta Ads Analyzer Pro", page_icon="üìä", layout="wide")

# Fun√ß√£o auxiliar para convers√£o segura de valores num√©ricos
def safe_float(value, default=0.0):
    try:
        return float(value) if value not in [None, ''] else default
    except (TypeError, ValueError):
        return default

def safe_int(value, default=0):
    try:
        return int(float(value)) if value not in [None, ''] else default
    except (TypeError, ValueError):
        return default

# ==============================================
# SISTEMA AVAN√áADO DE RECOMENDA√á√ïES (NOVO)
# ==============================================

def calculate_industry_benchmark(objective):
    """Retorna benchmarks baseados no objetivo da campanha"""
    benchmarks = {
        'CONVERSIONS': 25.00,
        'LEAD_GENERATION': 15.00,
        'LINK_CLICKS': 1.20,
        'REACH': 5.00,
        'BRAND_AWARENESS': 10.00,
        'VIDEO_VIEWS': 0.50
    }
    return benchmarks.get(objective, 20.00)

def analyze_creative_elements(creative_data):
    """Analisa elementos criativos espec√≠ficos"""
    recommendations = []
    
    if 'primary_text' in creative_data:
        text = creative_data['primary_text']
        word_count = len(text.split())
        
        if word_count > 125:
            recommendations.append({
                'title': 'Otimiza√ß√£o de Texto',
                'severity': 'medium',
                'diagnosis': f"Texto muito longo ({word_count} palavras), ideal √© <125 caracteres",
                'actions': [
                    "Reduzir texto em 30-40% mantendo a mensagem principal",
                    "Testar vers√£o com bullet points",
                    "Mover detalhes para a descri√ß√£o ou website"
                ],
                'expected_impact': "Aumento de 10-20% no CTR",
                'timeframe': "Imediato"
            })
    
    if 'cta' not in creative_data or not creative_data['cta']:
        recommendations.append({
            'title': 'Adicionar Call-to-Action',
            'severity': 'high',
            'diagnosis': "Nenhum CTA espec√≠fico identificado no criativo",
            'actions': [
                "Adicionar CTA claro como 'Compre Agora' ou 'Saiba Mais'",
                "Posicionar CTA nos primeiros 3 segundos (v√≠deo) ou acima do scroll (imagem)",
                "Testar 2-3 varia√ß√µes de CTA"
            ],
            'expected_impact': "Aumento de 15-25% nas convers√µes",
            'timeframe': "1-3 dias"
        })
    
    return recommendations

# ==============================================
# CONFIGURA√á√ÉO DA API DO META
# ==============================================
def generate_ai_optimization_recommendations(ad_details, insights, temporal_data, demographics):
    """Gera recomenda√ß√µes de otimiza√ß√£o baseadas em IA analisando todas as m√©tricas dispon√≠veis"""
    recommendations = []
    
    # 1. An√°lise de CTR
    ctr = safe_float(insights.get('ctr', 0)) * 100
    avg_ctr_benchmark = 1.5
    
    if ctr < avg_ctr_benchmark * 0.7:
        diagnosis = []
        if safe_float(insights.get('frequency', 0)) > 3:
            diagnosis.append(f"Frequ√™ncia alta ({insights.get('frequency', 0):.1f}x) indicando poss√≠vel fadiga criativa")
        
        if safe_float(insights.get('cpm', 0)) > avg_ctr_benchmark * 1.3:
            diagnosis.append(f"CPM elevado (R${insights.get('cpm', 0):.2f}) sugerindo p√∫blico competitivo")
        
        creative_type = ad_details.get('ad_type', 'desconhecido')
        recommendations.append({
            'title': 'Otimiza√ß√£o de CTR Urgente',
            'severity': 'high',
            'diagnosis': f"CTR muito baixo ({ctr:.2f}% vs benchmark {avg_ctr_benchmark}%). Poss√≠veis causas: {', '.join(diagnosis) if diagnosis else 'criativo ou segmenta√ß√£o inadequados'}",
            'actions': [
                f"Testar 3 novos criativos de {creative_type} com abordagens diferentes",
                "Reduzir texto principal para menos de 125 caracteres" if creative_type in ['image', 'carousel'] else "Adicionar legendas claras" if creative_type == 'video' else "Simplificar mensagem",
                f"Ajustar p√∫blico-alvo (atual: {ad_details.get('targeting', 'n√£o especificado')})",
                "Implementar rod√≠zio de criativos a cada 3 dias"
            ],
            'expected_impact': "Aumento de 30-50% no CTR",
            'timeframe': "3-5 dias para ver resultados"
        })
    
    # 2. An√°lise de Custo por Convers√£o
    cost_per_conv = safe_float(insights.get('cost_per_conversion', 0))
    conv_rate = safe_float(insights.get('conversion_rate', 0))
    
    if cost_per_conv > 0 and conv_rate > 0:
        benchmark_cpa = calculate_industry_benchmark(ad_details['campaign_objective'])
        if cost_per_conv > benchmark_cpa * 1.2:
            recommendations.append({
                'title': 'Redu√ß√£o de Custo por Convers√£o',
                'severity': 'high',
                'diagnosis': f"Custo por convers√£o (R${cost_per_conv:.2f}) est√° {((cost_per_conv/benchmark_cpa)-1)*100:.0f}% acima do benchmark ({benchmark_cpa:.2f})",
                'actions': [
                    "Otimizar p√°gina de destino para melhorar taxa de convers√£o",
                    "Testar novos CTAs no an√∫ncio e na landing page",
                    f"Ajustar bid strategy (atual: {ad_details.get('bid_strategy', 'n√£o especificado')})",
                    "Segmentar p√∫blico semelhante a converters (lookalike)"
                ],
                'expected_impact': "Redu√ß√£o de 20-35% no CPA",
                'timeframe': "1-2 semanas para otimiza√ß√£o completa"
            })
    
    # 3. An√°lise de Frequ√™ncia e Satura√ß√£o
    freq = safe_float(insights.get('frequency', 0))
    if freq > 3.5:
        rec = {
            'title': 'Rota√ß√£o de Criativos Necess√°ria',
            'severity': 'medium',
            'diagnosis': f"Frequ√™ncia alta ({freq:.1f}x) indica satura√ß√£o do p√∫blico",
            'actions': [
                "Pausar este an√∫ncio por 7 dias",
                "Criar 2-3 varia√ß√µes com novos criativos",
                "Expandir p√∫blico-alvo em 15-20%"
            ],
            'expected_impact': "Melhoria de 15-25% nas taxas de engajamento",
            'timeframe': "Imediato"
        }
        
        if ad_details.get('ad_type') == 'video':
            rec['actions'].extend([
                "Testar vers√£o resumida do v√≠deo (15-30s)",
                "Adicionar hook nos primeiros 3 segundos"
            ])
        recommendations.append(rec)
    
    # 4. An√°lise Demogr√°fica
    if demographics:
        demo_df = pd.DataFrame([{
            'age': d.get('age', 'N/A'),
            'gender': d.get('gender', 'N/A'),
            'impressions': safe_int(d.get('impressions', 0)),
            'spend': safe_float(d.get('spend', 0)),
            'conversions': safe_int(d.get('conversions', 0))
        } for d in demographics if 'age' in d])
        
        if not demo_df.empty:
            demo_df['cpa'] = demo_df['spend'] / demo_df['conversions'].replace(0, 1)
            worst_performing = demo_df.sort_values('cpa', ascending=False).iloc[0]
            
            if worst_performing['cpa'] > cost_per_conv * 1.5:
                recommendations.append({
                    'title': 'Ajuste de Segmenta√ß√£o Demogr√°fica',
                    'severity': 'medium',
                    'diagnosis': f"Segmento {worst_performing['age']} {worst_performing['gender']} tem CPA {worst_performing['cpa']:.2f} ({(worst_performing['cpa']/cost_per_conv-1)*100:.0f}% acima da m√©dia)",
                    'actions': [
                        f"Reduzir or√ßamento para {worst_performing['age']} {worst_performing['gender']} em 30%",
                        "Criar an√∫ncio espec√≠fico para este segmento",
                        "Testar mensagens personalizadas para este grupo"
                    ],
                    'expected_impact': "Redu√ß√£o de 15-20% no CPA geral",
                    'timeframe': "5-7 dias"
                })
    
    # 5. An√°lise Temporal
    if temporal_data is not None:
        temporal_data['day_of_week'] = temporal_data['date_start'].dt.day_name()
        temporal_data['hour'] = temporal_data['date_start'].dt.hour
        
        best_day = temporal_data.groupby('day_of_week')['conversions'].sum().idxmax()
        best_hour = temporal_data.groupby('hour')['conversions'].sum().idxmax()
        
        recommendations.append({
            'title': 'Otimiza√ß√£o de Agendamento',
            'severity': 'low',
            'diagnosis': f"Melhor desempenho √†s {best_hour}h nas {best_day}s",
            'actions': [
                f"Concentrar 40% do or√ßamento nas {best_day}s",
                f"Aumentar bids em 15% entre {best_hour-1}-{best_hour+1}h",
                "Reduzir bids em 20% nos hor√°rios de pior desempenho"
            ],
            'expected_impact': "Aumento de 10-15% na efici√™ncia do or√ßamento",
            'timeframe': "Pr√≥xima semana"
        })
    
    # 6. An√°lise de Creativos (se dispon√≠vel)
    if 'creative' in ad_details:
        creative_analysis = analyze_creative_elements(ad_details['creative'])
        if creative_analysis:
            recommendations.extend(creative_analysis)
    
    # Prioriza recomenda√ß√µes por severidade e impacto
    priority_order = {'high': 0, 'medium': 1, 'low': 2}
    recommendations.sort(key=lambda x: priority_order[x['severity']])
    
    return recommendations

def init_facebook_api():
    """Inicializa a conex√£o com a API do Meta com credenciais do usu√°rio"""
    st.sidebar.title("üîê Configura√ß√£o da API do Meta")
    
    with st.sidebar.expander("üîë Inserir Credenciais", expanded=True):
        app_id = st.text_input("App ID", help="ID do aplicativo Facebook")
        app_secret = st.text_input("App Secret", type="password", help="Chave secreta do aplicativo")
        access_token = st.text_input("Access Token", type="password", help="Token de acesso de longo prazo")
        ad_account_id = st.text_input("Ad Account ID", help="ID da conta de an√∫ncios (sem 'act_')")
    
    if not all([app_id, app_secret, access_token, ad_account_id]):
        st.warning("Por favor, preencha todas as credenciais na barra lateral")
        return None
    
    try:
        FacebookAdsApi.init(app_id, app_secret, access_token)
        return AdAccount(f"act_{ad_account_id}")
    except Exception as e:
        st.error(f"Erro ao conectar √† API do Meta: {str(e)}")
        return None

# ==============================================
# FUN√á√ïES PARA EXTRA√á√ÉO DE DADOS REAIS (API)
# ==============================================

def get_campaigns(ad_account):
    """Obt√©m campanhas da conta de an√∫ncio formatadas como dicion√°rios"""
    try:
        fields = ['id', 'name', 'objective', 'status', 'start_time', 'stop_time', 'buying_type']
        params = {'limit': 200}
        
        campaigns = ad_account.get_campaigns(fields=fields, params=params)
        
        campaigns_data = []
        for campaign in campaigns:
            campaigns_data.append({
                'id': campaign.get('id'),
                'name': campaign.get('name', 'Sem Nome'),
                'objective': campaign.get('objective', 'N/A'),
                'status': campaign.get('status', 'N/A'),
                'start_time': campaign.get('start_time', 'N/A'),
                'stop_time': campaign.get('stop_time', 'N/A'),
                'buying_type': campaign.get('buying_type', 'N/A')
            })
        
        return campaigns_data
    except Exception as e:
        st.error(f"Erro ao obter campanhas: {str(e)}")
        return []

def get_adsets(campaign_id):
    """Obt√©m conjuntos de an√∫ncios de uma campanha"""
    try:
        fields = [
            'id', 'name', 'daily_budget', 'lifetime_budget', 
            'start_time', 'end_time', 'optimization_goal',
            'billing_event', 'targeting', 'bid_strategy'
        ]
        params = {'limit': 100}
        campaign = Campaign(campaign_id)
        adsets = campaign.get_ad_sets(fields=fields, params=params)
        
        adsets_data = []
        for adset in adsets:
            adsets_data.append({
                'id': adset.get('id'),
                'name': adset.get('name', 'Sem Nome'),
                'daily_budget': safe_float(adset.get('daily_budget', 0)),
                'lifetime_budget': safe_float(adset.get('lifetime_budget', 0)),
                'start_time': adset.get('start_time', 'N/A'),
                'end_time': adset.get('end_time', 'N/A'),
                'optimization_goal': adset.get('optimization_goal', 'N/A'),
                'billing_event': adset.get('billing_event', 'N/A'),
                'bid_strategy': adset.get('bid_strategy', 'N/A')
            })
        
        return adsets_data
    except Exception as e:
        st.error(f"Erro ao obter conjuntos de an√∫ncios: {str(e)}")
        return []

def get_ads(adset_id):
    """Obt√©m an√∫ncios de um conjunto"""
    try:
        fields = [
            'id', 'name', 'status', 'created_time', 
            'adset_id', 'creative', 'bid_amount',
            'conversion_domain', 'targeting'
        ]
        params = {'limit': 100}
        adset = AdSet(adset_id)
        ads = adset.get_ads(fields=fields, params=params)
        
        ads_data = []
        for ad in ads:
            ads_data.append({
                'id': ad.get('id'),
                'name': ad.get('name', 'Sem Nome'),
                'status': ad.get('status', 'N/A'),
                'created_time': ad.get('created_time', 'N/A'),
                'adset_id': ad.get('adset_id', 'N/A'),
                'bid_amount': safe_float(ad.get('bid_amount', 0)),
                'conversion_domain': ad.get('conversion_domain', 'N/A')
            })
        
        return ads_data
    except Exception as e:
        st.error(f"Erro ao obter an√∫ncios: {str(e)}")
        return []

def get_ad_insights(ad_id, date_range='last_30d'):
    """Obt√©m m√©tricas de desempenho do an√∫ncio com mais detalhes"""
    try:
        fields = [
            'impressions', 'reach', 'frequency', 
            'spend', 'cpm', 'cpp', 'ctr', 'clicks',
            'conversions', 'actions', 'action_values',
            'cost_per_conversion', 'cost_per_action_type',
            'cost_per_unique_click', 'cost_per_unique_action_type',
            'unique_clicks', 'unique_actions',
            'quality_ranking', 'engagement_rate_ranking',
            'conversion_rate_ranking', 'video_p25_watched_actions',
            'video_p50_watched_actions', 'video_p75_watched_actions',
            'video_p95_watched_actions', 'video_p100_watched_actions',
            'video_avg_time_watched_actions'
        ]
        
        # Limite de 37 meses para o intervalo de datas
        max_months = 37
        
        if date_range == 'last_30d':
            since = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            until = datetime.now().strftime('%Y-%m-%d')
        elif date_range == 'last_7d':
            since = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            until = datetime.now().strftime('%Y-%m-%d')
        else:
            since, until = date_range.split('_to_')
            since_date = datetime.strptime(since, '%Y-%m-%d')
            until_date = datetime.strptime(until, '%Y-%m-%d')
            if (until_date - since_date).days > (max_months * 30):
                st.warning(f"O intervalo m√°ximo permitido √© de {max_months} meses. Ajustando automaticamente.")
                since = (until_date - timedelta(days=max_months*30)).strftime('%Y-%m-%d')
        
        params = {
            'time_range': {'since': since, 'until': until},
            'level': 'ad',
            'limit': 100
        }
        
        ad = Ad(ad_id)
        insights = ad.get_insights(fields=fields, params=params)
        
        if insights:
            # Processa a√ß√µes espec√≠ficas
            actions = insights[0].get('actions', [])
            action_data = {}
            for action in actions:
                action_type = action.get('action_type')
                value = safe_float(action.get('value', 0))
                action_data[f'action_{action_type}'] = value
            
            # Processa valores de a√ß√£o
            action_values = insights[0].get('action_values', [])
            for action in action_values:
                action_type = action.get('action_type')
                value = safe_float(action.get('value', 0))
                action_data[f'action_value_{action_type}'] = value
            
            # Adiciona ao dicion√°rio de insights
            insight_dict = {**insights[0], **action_data}
            return insight_dict
        
        return None
    except Exception as e:
        st.error(f"Erro ao obter insights do an√∫ncio: {str(e)}")
        return None

def get_ad_demographics(ad_id, date_range='last_30d'):
    """Obt√©m dados demogr√°ficos detalhados com mais m√©tricas"""
    try:
        fields = [
            'impressions', 'reach', 'frequency',
            'clicks', 'spend', 'conversions',
            'ctr', 'cpm', 'cpp', 
            'cost_per_conversion'
        ]
        
        # Breakdowns mais simples para garantir funcionamento
        breakdowns = ['age', 'gender']
        
        if date_range == 'last_30d':
            since = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            until = datetime.now().strftime('%Y-%m-%d')
        elif date_range == 'last_7d':
            since = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            until = datetime.now().strftime('%Y-%m-%d')
        else:
            since, until = date_range.split('_to_')

        params = {
            'time_range': {'since': since, 'until': until},
            'breakdowns': breakdowns,
            'level': 'ad'
        }
        
        ad = Ad(ad_id)
        insights = ad.get_insights(fields=fields, params=params)
        
        if not insights:
            return []

        processed_data = []
        for insight in insights:
            try:
                segment = {
                    'age': insight.get('age', 'N/A'),
                    'gender': insight.get('gender', 'N/A'),
                    'impressions': safe_int(insight.get('impressions', 0)),
                    'reach': safe_int(insight.get('reach', 0)),
                    'clicks': safe_int(insight.get('clicks', 0)),
                    'spend': safe_float(insight.get('spend', 0)),
                    'conversions': safe_int(insight.get('conversions', 0)),
                    'ctr': safe_float(insight.get('ctr', 0)) * 100,
                    'cpm': safe_float(insight.get('cpm', 0))
                }
                processed_data.append(segment)
            except Exception as e:
                st.warning(f"Erro ao processar insight: {str(e)}")
                continue
        
        return processed_data

    except Exception as e:
        st.error(f"Erro ao obter dados demogr√°ficos: {str(e)}")
        return []
    
def show_detailed_audience_analysis(demographics):
    """Mostra an√°lise detalhada do p√∫blico-alvo"""
    if not demographics:
        st.warning("Dados demogr√°ficos n√£o dispon√≠veis para este an√∫ncio.")
        return
    
    st.markdown("### üë• An√°lise Detalhada do P√∫blico")
    
    # Filtros para an√°lise
    col1, col2 = st.columns(2)
    with col1:
        segment_type = st.selectbox(
            "Tipo de Segmento:",
            options=['demographic', 'geographic', 'device', 'placement'],
            index=0
        )
    
    with col2:
        metric = st.selectbox(
            "M√©trica Principal:",
            options=['impressions', 'reach', 'clicks', 'conversions', 'ctr', 'cost_per_conversion'],
            index=3
        )
    
    # Filtrar dados pelo tipo de segmento selecionado
    segment_data = [d for d in demographics if d.get('segment_type') == segment_type]
    
    if not segment_data:
        st.warning(f"Nenhum dado dispon√≠vel para o tipo de segmento {segment_type}")
        return
    
    # Criar DataFrame para an√°lise
    df = pd.DataFrame(segment_data)
    
    # Visualiza√ß√£o espec√≠fica por tipo de segmento
    if segment_type == 'demographic':
        st.markdown("#### üìä Distribui√ß√£o por Idade e G√™nero")
        
        # Pivot table para heatmap
        pivot_table = df.pivot_table(
            index='age', 
            columns='gender', 
            values=metric, 
            aggfunc='sum'
        ).fillna(0)
        
        fig = px.imshow(
            pivot_table,
            labels=dict(x="G√™nero", y="Idade", color=metric),
            title=f"{metric.upper()} por Idade e G√™nero",
            color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # An√°lise de performance por segmento
        st.markdown("#### üèÜ Melhores Segmentos Demogr√°ficos")
        
        top_segments = df.groupby(['age', 'gender']).agg({
            'impressions': 'sum',
            'clicks': 'sum',
            'conversions': 'sum',
            'spend': 'sum'
        }).reset_index()
        
        top_segments['ctr'] = (top_segments['clicks'] / top_segments['impressions']) * 100
        top_segments['cpa'] = top_segments['spend'] / top_segments['conversions']
        top_segments['conversion_rate'] = (top_segments['conversions'] / top_segments['clicks']) * 100
        
        # Mostrar tabela com os melhores segmentos
        st.dataframe(
            top_segments.sort_values(metric, ascending=False).head(10),
            column_config={
                "age": "Idade",
                "gender": "G√™nero",
                "impressions": st.column_config.NumberColumn(format="%d"),
                "clicks": st.column_config.NumberColumn(format="%d"),
                "conversions": st.column_config.NumberColumn(format="%d"),
                "spend": st.column_config.NumberColumn(format="R$ %.2f"),
                "ctr": st.column_config.NumberColumn(format="%.2f%%"),
                "cpa": st.column_config.NumberColumn(format="R$ %.2f"),
                "conversion_rate": st.column_config.NumberColumn(format="%.2f%%")
            },
            hide_index=True
        )
    
    elif segment_type == 'geographic':
        st.markdown("#### üåé Distribui√ß√£o Geogr√°fica")
        
        # Mapa de calor por pa√≠s/regi√£o
        geo_data = df.groupby(['country', 'region']).agg({
            metric: 'sum'
        }).reset_index()
        
        fig = px.choropleth(
            geo_data,
            locations='country',
            locationmode='country names',
            color=metric,
            hover_name='region',
            title=f"Distribui√ß√£o de {metric.upper()} por Localiza√ß√£o"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    elif segment_type == 'device':
        st.markdown("#### üì± Distribui√ß√£o por Dispositivo")
        
        device_data = df.groupby('device').agg({
            metric: 'sum'
        }).reset_index()
        
        fig = px.pie(
            device_data,
            names='device',
            values=metric,
            title=f"{metric.upper()} por Tipo de Dispositivo"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    elif segment_type == 'placement':
        st.markdown("#### üìç Distribui√ß√£o por Placement")
        
        placement_data = df.groupby('placement').agg({
            metric: 'sum'
        }).reset_index()
        
        fig = px.bar(
            placement_data.sort_values(metric, ascending=False),
            x='placement',
            y=metric,
            title=f"{metric.upper()} por Placement"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise de ROI por segmento
    st.markdown("### üìà ROI por Segmento")
    
    if 'conversions' in df.columns and 'spend' in df.columns:
        roi_df = df.groupby(
            'age' if segment_type == 'demographic' else 
            'country' if segment_type == 'geographic' else
            'device' if segment_type == 'device' else
            'placement'
        ).agg({
            'spend': 'sum',
            'conversions': 'sum'
        }).reset_index()
        
        roi_df['cpa'] = roi_df['spend'] / roi_df['conversions']
        roi_df['roi'] = (roi_df['conversions'] * 100) / roi_df['spend']  # Simples - ajustar conforme valor de convers√£o
        
        fig = px.bar(
            roi_df.sort_values('roi', ascending=False),
            x=roi_df.columns[0],
            y='roi',
            title='ROI por Segmento (Quanto maior, melhor)',
            color='cpa',
            color_continuous_scale='RdYlGn'
        )
        st.plotly_chart(fig, use_container_width=True)

def show_demographic_analysis(demographics):
    """Mostra an√°lise detalhada por idade e g√™nero"""
    if not demographics:
        st.warning("Dados demogr√°ficos n√£o dispon√≠veis para este an√∫ncio.")
        return
    
    st.markdown("## üë• An√°lise Demogr√°fica Detalhada")
    
    # Converter para DataFrame
    df = pd.DataFrame(demographics)
    
    # Verificar e limpar dados
    df = df[df['age'].notna()]
    df = df[df['age'] != 'N/A']
    
    # Calcular m√©tricas derivadas
    df['ctr'] = (df['clicks'] / df['impressions'].replace(0, 1)) * 100
    df['conversion_rate'] = (df['conversions'] / df['clicks'].replace(0, 1)) * 100
    df['cost_per_conversion'] = df['spend'] / df['conversions'].replace(0, 1)
    
    # Fun√ß√£o para ordena√ß√£o correta das faixas et√°rias
    def age_sort_key(age_str):
        try:
            if age_str == '65+':
                return (65, 100)
            elif '-' in age_str:
                start, end = map(int, age_str.split('-'))
                return (start, end)
            else:
                age = int(age_str)
                return (age, age)
        except:
            return (999, 999)
    
    # Preparar an√°lise por idade e g√™nero
    age_gender_analysis = df.groupby(['age', 'gender']).agg({
        'impressions': 'sum',
        'clicks': 'sum',
        'conversions': 'sum',
        'spend': 'sum',
        'ctr': 'mean',
        'conversion_rate': 'mean',
        'cost_per_conversion': 'mean'
    }).reset_index()
    
    # Adicionar chave de ordena√ß√£o e ordenar
    age_gender_analysis['sort_key'] = age_gender_analysis['age'].apply(age_sort_key)
    age_gender_analysis = age_gender_analysis.sort_values('sort_key')
    
    # Definir best_segment e worst_segment
    if not age_gender_analysis.empty:
        best_segment = age_gender_analysis.loc[age_gender_analysis['conversion_rate'].idxmax()]
        worst_segment = age_gender_analysis.loc[age_gender_analysis['conversion_rate'].idxmin()]
    else:
        st.warning("N√£o h√° dados suficientes para an√°lise segmentada.")
        return
    
    # ... (restante do c√≥digo de visualiza√ß√£o permanece igual)

    # Recomenda√ß√µes baseadas nos dados
    st.markdown("### üí° Recomenda√ß√µes de Segmenta√ß√£o")
    
    if best_segment['conversion_rate'] > 2 * worst_segment['conversion_rate']:
        st.success(f"""
        **Segmento de Alto Desempenho:**  
        {best_segment['gender'].capitalize()}s de {best_segment['age']} anos  
        - CTR: {best_segment['ctr']:.2f}%  
        - Taxa de Convers√£o: {best_segment['conversion_rate']:.2f}%  
        - Custo por Convers√£o: R${best_segment['cost_per_conversion']:.2f}
        
        **A√ß√µes Recomendadas:**
        - Aumentar investimento neste segmento
        - Criar campanhas espec√≠ficas para este p√∫blico
        - Desenvolver criativos similares para p√∫blicos adjacentes
        """)
    
    st.warning(f"""
    **Segmento de Baixo Desempenho:**  
    {worst_segment['gender'].capitalize()}s de {worst_segment['age']} anos  
    - CTR: {worst_segment['ctr']:.2f}%  
    - Taxa de Convers√£o: {worst_segment['conversion_rate']:.2f}%  
    - Custo por Convers√£o: R${worst_segment['cost_per_conversion']:.2f}
    
    **A√ß√µes Recomendadas:**
    - Revisar segmenta√ß√£o para este grupo
    - Testar mensagens diferentes
    - Considerar reduzir investimento ou excluir este segmento
    """)
    
    st.warning(f"""
    **Segmento de Baixo Desempenho:**  
    {worst_segment['gender'].capitalize()}s de {worst_segment['age']} anos  
    - CTR: {worst_segment['ctr']:.2f}%  
    - Taxa de Convers√£o: {worst_segment['conversion_rate']:.2f}%  
    - Custo por Convers√£o: R${worst_segment['cost_per_conversion']:.2f}
    
    **A√ß√µes Recomendadas:**
    - Revisar segmenta√ß√£o para este grupo
    - Testar mensagens diferentes
    - Considerar reduzir investimento ou excluir este segmento
    """)

def get_ad_insights_over_time(ad_id, date_range='last_30d'):
    """Obt√©m m√©tricas di√°rias com tratamento seguro para campos ausentes"""
    try:
        # Campos base que geralmente est√£o dispon√≠veis
        base_fields = [
            'date_start', 'impressions', 'reach', 'spend',
            'clicks', 'ctr', 'frequency', 'cpm'
        ]
        
        # Campos adicionais que podem n√£o estar dispon√≠veis
        optional_fields = [
            'conversions', 'cost_per_conversion',
            'unique_clicks', 'actions'
        ]
        
        # Primeira tentativa com todos os campos
        fields = base_fields + optional_fields
        
        if date_range == 'last_30d':
            since = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            until = datetime.now().strftime('%Y-%m-%d')
        elif date_range == 'last_7d':
            since = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            until = datetime.now().strftime('%Y-%m-%d')
        else:
            since, until = date_range.split('_to_')

        params = {
            'time_range': {'since': since, 'until': until},
            'level': 'ad',
            'time_increment': 1
        }

        ad = Ad(ad_id)
        insights = ad.get_insights(fields=fields, params=params)
        
        if not insights:
            return None

        # Processamento seguro dos dados
        data = []
        for insight in insights:
            row = {}
            for field in fields:
                # Tratamento especial para actions/conversions
                if field == 'actions':
                    actions = insight.get(field, [])
                    conversions = sum(float(a['value']) for a in actions 
                                  if a['action_type'] == 'conversion' and 'value' in a)
                    row['conversions'] = conversions
                else:
                    row[field] = insight.get(field, 0)
            data.append(row)
        
        df = pd.DataFrame(data)
        
        # Garantir tipos corretos
        df['date_start'] = pd.to_datetime(df['date_start'], errors='coerce')
        df = df.dropna(subset=['date_start']).sort_values('date_start')
        
        # Converter m√©tricas num√©ricas
        for col in base_fields[1:] + optional_fields:
            if col in df.columns:
                df[col] = df[col].apply(safe_float)
        
        # Calcular m√©tricas derivadas
        df['ctr'] = df['ctr'] * 100  # Converter para porcentagem
        df['cpc'] = np.where(df['clicks'] > 0, df['spend']/df['clicks'], 0)
        
        if 'conversions' in df.columns:
            df['conversion_rate'] = np.where(df['clicks'] > 0,
                                           (df['conversions']/df['clicks'])*100,
                                           0)
            df['cost_per_conversion'] = np.where(df['conversions'] > 0,
                                               df['spend']/df['conversions'],
                                               0)
        
        return df

    except Exception as e:
        st.error(f"Erro ao processar dados temporais: {str(e)}")
        return None

# ==============================================
# VISUALIZA√á√ïES MELHORADAS
# ==============================================

def create_performance_gauge(value, min_val, max_val, title, color_scale=None):
    """Cria um medidor visual estilo gauge com escala de cores personaliz√°vel"""
    if color_scale is None:
        color_scale = {
            'axis': {'range': [min_val, max_val]},
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': (min_val + max_val) * 0.7
            },
            'steps': [
                {'range': [min_val, min_val*0.6], 'color': "red"},
                {'range': [min_val*0.6, min_val*0.8], 'color': "orange"},
                {'range': [min_val*0.8, max_val], 'color': "green"}]
        }
    
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=value,
        number={'suffix': '%', 'font': {'size': 24}},
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': title, 'font': {'size': 18}},
        gauge=color_scale
    ))
    fig.update_layout(margin=dict(t=50, b=10))
    return fig

def create_trend_chart(df, x_col, y_cols, title, mode='lines'):
    """Cria gr√°fico de tend√™ncia temporal com m√∫ltiplas m√©tricas"""
    fig = px.line(df, x=x_col, y=y_cols, title=title,
                 line_shape='spline', render_mode='svg')
    
    fig.update_layout(
        hovermode='x unified',
        legend_title_text='M√©trica',
        xaxis_title='Data',
        yaxis_title='Valor',
        plot_bgcolor='rgba(240,240,240,0.9)'
    )
    
    # Adiciona anota√ß√µes para pontos m√°ximos e m√≠nimos
    for col in y_cols:
        max_val = df[col].max()
        min_val = df[col].min()
        
        max_date = df.loc[df[col] == max_val, x_col].values[0]
        min_date = df.loc[df[col] == min_val, x_col].values[0]
        
        fig.add_annotation(x=max_date, y=max_val,
                          text=f"Max: {max_val:.2f}",
                          showarrow=True,
                          arrowhead=1)
        
        fig.add_annotation(x=min_date, y=min_val,
                          text=f"Min: {min_val:.2f}",
                          showarrow=True,
                          arrowhead=1)
    
    return fig

def show_video_analysis(demographics):
    """Mostra an√°lise de performance de v√≠deos por demografia"""
    video_data = [d for d in demographics if 'video_views' in d and d['video_views'] > 0]
    
    if not video_data:
        return
    
    st.markdown("## üé• An√°lise de Performance de V√≠deo")
    
    df = pd.DataFrame(video_data)
    
    # M√©tricas de v√≠deo por idade
    st.markdown("### üìâ Reten√ß√£o por Faixa Et√°ria")
    
    video_metrics = df.groupby('age').agg({
        'video_views': 'sum',
        'video_completion_25': 'sum',
        'video_completion_50': 'sum',
        'video_completion_75': 'sum',
        'video_completion_95': 'sum',
        'avg_watch_time': 'mean'
    }).reset_index()
    
    # Calcular taxas de conclus√£o
    for p in [25, 50, 75, 95]:
        video_metrics[f'completion_{p}_rate'] = (video_metrics[f'video_completion_{p}'] / video_metrics['video_views']) * 100
    
    # Gr√°fico de reten√ß√£o
    fig_retention = px.line(
        video_metrics,
        x='age',
        y=['completion_25_rate', 'completion_50_rate', 'completion_75_rate', 'completion_95_rate'],
        title='Taxas de Conclus√£o do V√≠deo por Idade',
        labels={'value': 'Percentual de Conclus√£o', 'variable': 'Ponto do V√≠deo'},
        markers=True
    )
    st.plotly_chart(fig_retention, use_container_width=True)
    
    # An√°lise por g√™nero
    st.markdown("### ‚ôÄÔ∏è‚ôÇÔ∏è Engajamento por G√™nero")
    
    gender_video = df.groupby('gender').agg({
        'video_views': 'sum',
        'avg_watch_time': 'mean',
        'video_completion_95': 'sum'
    }).reset_index()
    
    gender_video['completion_rate'] = (gender_video['video_completion_95'] / gender_video['video_views']) * 100
    
    col1, col2 = st.columns(2)
    with col1:
        fig_gender_views = px.pie(
            gender_video,
            names='gender',
            values='video_views',
            title='Visualiza√ß√µes por G√™nero'
        )
        st.plotly_chart(fig_gender_views, use_container_width=True)
    
    with col2:
        fig_gender_time = px.bar(
            gender_video,
            x='gender',
            y='avg_watch_time',
            title='Tempo M√©dio de Visualiza√ß√£o',
            color='gender',
            color_discrete_map={'male': 'blue', 'female': 'pink'}
        )
        st.plotly_chart(fig_gender_time, use_container_width=True)
    
    # Recomenda√ß√µes baseadas nos dados
    st.markdown("### üí° Recomenda√ß√µes para V√≠deos")
    
    best_age = video_metrics.loc[video_metrics['completion_95_rate'].idxmax()]['age']
    worst_age = video_metrics.loc[video_metrics['completion_95_rate'].idxmin()]['age']
    
    st.info(f"""
    **Melhor performance:** {best_age} anos ({video_metrics['completion_95_rate'].max():.1f}% conclus√£o)  
    **Pior performance:** {worst_age} anos ({video_metrics['completion_95_rate'].min():.1f}% conclus√£o)
    
    **A√ß√µes sugeridas:**
    - Criar vers√µes mais curtas para o p√∫blico de {worst_age} anos
    - Testar hooks diferentes nos primeiros 3 segundos
    - Analisar o momento de drop-off para cada faixa et√°ria
    """)

def create_benchmark_comparison(current_values, benchmark_values, labels):
    """Cria gr√°fico de compara√ß√£o com benchmarks do setor"""
    fig = go.Figure()
    
    for i, (current, benchmark, label) in enumerate(zip(current_values, benchmark_values, labels)):
        fig.add_trace(go.Bar(
            x=[f"{label}"],
            y=[current],
            name='Seu An√∫ncio',
            marker_color='#1f77b4',
            showlegend=(i == 0)
        ))
        
        fig.add_trace(go.Bar(
            x=[f"{label}"],
            y=[benchmark],
            name='Benchmark Setor',
            marker_color='#ff7f0e',
            showlegend=(i == 0)
        ))
    
    fig.update_layout(
        barmode='group',
        title='Compara√ß√£o com Benchmarks do Setor',
        yaxis_title='Valor',
        plot_bgcolor='rgba(240,240,240,0.9)'
    )
    
    return fig

def generate_performance_recommendations(insights, temporal_data):
    """Gera recomenda√ß√µes estrat√©gicas baseadas em m√©tricas"""
    recommendations = []
    
    # An√°lise de CTR
    ctr = safe_float(insights.get('ctr', 0)) * 100
    if ctr < 0.8:
        recommendations.append({
            'type': 'error',
            'title': 'CTR Baixo',
            'message': f"CTR de {ctr:.2f}% est√° abaixo do benchmark recomendado (1-2%)",
            'actions': [
                "Teste diferentes imagens/thumbnails no criativo",
                "Reduza o texto principal (ideal <125 caracteres)",
                "Posicione o CTA de forma mais destacada",
                "Teste diferentes c√≥pias de texto"
            ]
        })
    elif ctr > 2.5:
        recommendations.append({
            'type': 'success',
            'title': 'CTR Alto',
            'message': f"Excelente CTR de {ctr:.2f}%!",
            'actions': [
                "Aumente o or√ßamento para escalar este desempenho",
                "Replique a estrat√©gia para p√∫blicos similares",
                "Documente as caracter√≠sticas deste an√∫ncio"
            ]
        })
    
    # An√°lise de Custo por Convers√£o
    cost_per_conv = safe_float(insights.get('cost_per_conversion', 0))
    if cost_per_conv > 50:
        recommendations.append({
            'type': 'error',
            'title': 'Custo Alto por Convers√£o',
            'message': f"R${cost_per_conv:.2f} por convers√£o (acima da m√©dia)",
            'actions': [
                "Otimize a landing page (taxa de convers√£o pode estar baixa)",
                "Ajuste a segmenta√ß√£o para p√∫blicos mais qualificados",
                "Teste diferentes objetivos de campanha",
                "Verifique a qualidade do tr√°fego"
            ]
        })
    
    # An√°lise de Frequ√™ncia (se houver dados temporais)
    if temporal_data is not None:
        freq = temporal_data['frequency'].mean()
        if freq > 3.5:
            recommendations.append({
                'type': 'warning',
                'title': 'Frequ√™ncia Elevada',
                'message': f"M√©dia de {freq:.1f} impress√µes por usu√°rio (risco de fadiga)",
                'actions': [
                    "Reduza o or√ßamento ou pause temporariamente",
                    "Atualize o criativo para evitar satura√ß√£o",
                    "Expanda o p√∫blico-alvo"
                ]
            })
    
    return recommendations

# ==============================================
# INTERFACES DE USU√ÅRIO PARA AN√ÅLISE REAL
# ==============================================

def show_real_analysis():
    st.markdown("## üîç An√°lise de An√∫ncios Reais - Meta Ads")
    
    # Inicializa a API com as credenciais do usu√°rio
    ad_account = init_facebook_api()
    if not ad_account:
        return  # Sai se as credenciais n√£o foram fornecidas
    
    # Restante do c√≥digo permanece igual...
    date_range = st.radio("Per√≠odo de an√°lise:", 
                         ["√öltimos 7 dias", "√öltimos 30 dias", "Personalizado"],
                         index=1, horizontal=True)
    
    custom_range = None
    if date_range == "Personalizado":
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("Data inicial", datetime.now() - timedelta(days=30))
        with col2:
            end_date = st.date_input("Data final", datetime.now())
        custom_range = f"{start_date.strftime('%Y-%m-%d')}_to_{end_date.strftime('%Y-%m-%d')}"
    
    date_range_param = {
        "√öltimos 7 dias": "last_7d",
        "√öltimos 30 dias": "last_30d",
        "Personalizado": custom_range
    }[date_range]
    
    with st.spinner("Carregando campanhas..."):
        campaigns = get_campaigns(ad_account)
        
        if campaigns and st.toggle('Mostrar dados brutos (debug)'):
            st.write("Dados brutos das campanhas:", campaigns)

    if not campaigns:
        st.warning("Nenhuma campanha encontrada nesta conta.")
        return
    
    selected_campaign = st.selectbox(
        "Selecione uma campanha:",
        options=campaigns,
        format_func=lambda x: f"{x.get('name', 'Sem Nome')} (ID: {x.get('id', 'N/A')})",
        key='campaign_select'
    )
    
    with st.spinner("Carregando conjuntos de an√∫ncios..."):
        adsets = get_adsets(selected_campaign['id'])
    
    if not adsets:
        st.warning("Nenhum conjunto de an√∫ncios encontrado nesta campanha.")
        return
    
    selected_adset = st.selectbox(
        "Selecione um conjunto de an√∫ncios:",
        options=adsets,
        format_func=lambda x: f"{x.get('name', 'Sem Nome')} (ID: {x.get('id', 'N/A')})"
    )
    
    with st.spinner("Carregando an√∫ncios..."):
        ads = get_ads(selected_adset['id'])
    
    if not ads:
        st.warning("Nenhum an√∫ncio encontrado neste conjunto.")
        return
    
    selected_ad = st.selectbox(
        "Selecione um an√∫ncio para an√°lise:",
        options=ads,
        format_func=lambda x: f"{x.get('name', 'Sem Nome')} (ID: {x.get('id', 'N/A')})"
    )
    
    if st.button("üîç Analisar An√∫ncio", type="primary"):
        with st.spinner("Coletando dados do an√∫ncio..."):
            ad_details = {
                'id': selected_ad['id'],
                'name': selected_ad.get('name', 'N/A'),
                'status': selected_ad.get('status', 'N/A'),
                'created_time': selected_ad.get('created_time', 'N/A'),
                'bid_amount': selected_ad.get('bid_amount', 'N/A'),
                'campaign_id': selected_campaign['id'],
                'campaign_name': selected_campaign.get('name', 'N/A'),
                'campaign_objective': selected_campaign.get('objective', 'N/A'),
                'adset_id': selected_adset['id'],
                'adset_name': selected_adset.get('name', 'N/A'),
                'adset_budget': selected_adset.get('daily_budget', 'N/A'),
                'adset_optimization': selected_adset.get('optimization_goal', 'N/A')
            }
            
            ad_insights = get_ad_insights(selected_ad['id'], date_range_param)
            ad_demographics = get_ad_demographics(selected_ad['id'], date_range_param)
            temporal_data = get_ad_insights_over_time(selected_ad['id'], date_range_param)
            
            if ad_insights:
                show_ad_results(ad_details, ad_insights, ad_demographics, date_range_param, temporal_data)
            else:
                st.error("N√£o foi poss√≠vel obter dados de desempenho para este an√∫ncio.")

def show_ad_results(details, insights, demographics, date_range, temporal_data=None):
    st.success(f"‚úÖ Dados obtidos com sucesso para o an√∫ncio {details['id']}")
    
    # Se√ß√£o de detalhes do an√∫ncio
    st.markdown("### üìù Detalhes do An√∫ncio")
    cols = st.columns(4)
    cols[0].metric("Nome do An√∫ncio", details.get('name', 'N/A'))
    cols[1].metric("Campanha", details.get('campaign_name', 'N/A'))
    cols[2].metric("Conjunto", details.get('adset_name', 'N/A'))
    cols[3].metric("Status", details.get('status', 'N/A'))
    
    cols = st.columns(4)
    cols[0].metric("Objetivo", details.get('campaign_objective', 'N/A'))
    cols[1].metric("Otimiza√ß√£o", details.get('adset_optimization', 'N/A'))
    cols[2].metric("Lance", f"R$ {safe_float(details.get('bid_amount', 0)):.2f}")
    cols[3].metric("Or√ßamento Di√°rio", f"R$ {safe_float(details.get('adset_budget', 0)):.2f}")
    
    # Se√ß√£o de m√©tricas de desempenho
    st.markdown("### üìä M√©tricas de Desempenho")
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä Performance","üìà Tend√™ncias","üë• P√∫blico","üß† Recomenda√ß√µes IA","üîç An√°lise Demogr√°fica"])
    
    with tab1:
        # M√©tricas principais em colunas
        col1, col2, col3 = st.columns(3)
        
        with col1:
            ctr = safe_float(insights.get('ctr', 0)) * 100
            st.plotly_chart(create_performance_gauge(
                ctr, 0, 10, 
                f"CTR: {ctr:.2f}%"), 
                use_container_width=True)
        
        with col2:
            conversions = safe_float(insights.get('conversions', 0))
            clicks = safe_float(insights.get('clicks', 0))
            conversion_rate = (conversions / clicks) * 100 if clicks > 0 else 0
            st.plotly_chart(create_performance_gauge(
                conversion_rate, 0, 20, 
                f"Taxa de Convers√£o: {conversion_rate:.2f}%"), 
                use_container_width=True)
        
        with col3:
            spend = safe_float(insights.get('spend', 0))
            conversions = safe_float(insights.get('conversions', 0))
            cost_per_conversion = spend / conversions if conversions > 0 else 0
            st.plotly_chart(create_performance_gauge(
                cost_per_conversion, 0, 100, 
                f"Custo por Convers√£o: R${cost_per_conversion:.2f}"), 
                use_container_width=True)
            
        # Outras m√©tricas em colunas
        cols = st.columns(4)
        metrics = [
            ("Impress√µes", safe_int(insights.get('impressions', 0)), "{:,}"),
            ("Alcance", safe_int(insights.get('reach', 0)), "{:,}"),
            ("Frequ√™ncia", safe_float(insights.get('frequency', 0)), "{:.2f}x"),
            ("Investimento", safe_float(insights.get('spend', 0)), "R$ {:,.2f}"),
            ("CPM", safe_float(insights.get('cpm', 0)), "R$ {:.2f}"),
            ("CPC", safe_float(insights.get('cost_per_unique_click', insights.get('cpp', 0))), "R$ {:.2f}"),
            ("Cliques", safe_int(insights.get('clicks', 0)), "{:,}"),
            ("Cliques √önicos", safe_int(insights.get('unique_outbound_clicks', 0)), "{:,}")
        ]
        
        for i, (label, value, fmt) in enumerate(metrics):
            cols[i % 4].metric(label, fmt.format(value))
    
    with tab2:
        if temporal_data is not None:
            st.subheader("üìà An√°lise Temporal Detalhada")

            available_metrics = ['impressions', 'reach', 'spend', 'clicks',
                                 'ctr', 'conversions', 'cost_per_conversion',
                                 'frequency', 'cpm', 'cpc', 'conversion_rate']

            selected_metrics = st.multiselect(
                "Selecione m√©tricas para visualizar:",
                options=available_metrics,
                default=['impressions', 'spend', 'conversions'],
                key='temp_metrics_unique_key'
            )

            if selected_metrics:
                # Gr√°fico de linhas principal
                fig = px.line(
                    temporal_data,
                    x='date_start',
                    y=selected_metrics,
                    title='Desempenho ao Longo do Tempo',
                    markers=True,
                    line_shape='spline'
                )
                fig.update_layout(
                    hovermode='x unified',
                    yaxis_title='Valor',
                    xaxis_title='Data'
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # An√°lise de correla√ß√£o
                st.subheader("üîç Correla√ß√£o Entre M√©tricas")
                corr_matrix = temporal_data[selected_metrics].corr()
                fig_corr = px.imshow(
                    corr_matrix,
                    text_auto=True,
                    aspect='auto',
                    color_continuous_scale='RdBu',
                    labels=dict(color='Correla√ß√£o')
                )
                st.plotly_chart(fig_corr, use_container_width=True)
                
                # Melhores dias por m√©trica
                st.subheader("üèÜ Melhores Dias")
                best_days = []
                for metric in selected_metrics:
                    best_day = temporal_data.loc[temporal_data[metric].idxmax()]
                    if pd.api.types.is_datetime64_any_dtype(best_day['date_start']):
                        date_str = best_day['date_start'].strftime('%Y-%m-%d')
                    else:
                        date_str = pd.to_datetime(best_day['date_start']).strftime('%Y-%m-%d')
                    
                    best_days.append({
                        'M√©trica': metric,
                        'Data': best_day['date_start'].strftime('%Y-%m-%d'),
                        'Valor': best_day[metric],
                        'Investimento': best_day['spend']
                    })
                
                st.dataframe(pd.DataFrame(best_days), hide_index=True)
        else:
            st.warning("Dados temporais n√£o dispon√≠veis para este an√∫ncio.")

    with tab3:
        # Mostra a√ß√µes espec√≠ficas e seus valores
        st.markdown("#### üéØ A√ß√µes Espec√≠ficas Registradas")
        
        # Filtra todas as chaves que come√ßam com 'action_' ou 'action_value_'
        actions = {k: v for k, v in insights.items() if k.startswith('action_') or k.startswith('action_value_')}
        
        if actions:
            # Agrupa a√ß√µes e valores
            action_types = set([k.split('_', 1)[1] for k in actions.keys()])
            
            for action_type in action_types:
                action_count = safe_int(actions.get(f'action_{action_type}', 0))
                action_value = safe_float(actions.get(f'action_value_{action_type}', 0))
                
                cols = st.columns(2)
                cols[0].metric(f"üîπ {action_type.replace('_', ' ').title()}", action_count)
                cols[1].metric(f"üí∞ Valor Total", f"R$ {action_value:.2f}")
        else:
            st.info("Nenhuma a√ß√£o espec√≠fica registrada para este an√∫ncio no per√≠odo selecionado")
        with tab4:  # Nova aba de recomenda√ß√µes com IA
            st.markdown("## üß† Recomenda√ß√µes de Otimiza√ß√£o Inteligente")
        
        with st.spinner("Analisando m√©tricas e gerando recomenda√ß√µes personalizadas..."):
            recommendations = generate_ai_optimization_recommendations(
                details, insights, temporal_data, demographics
            )
        
        if not recommendations:
            st.success("‚úÖ Seu an√∫ncio est√° performando acima dos benchmarks em todas as m√©tricas-chave!")
        else:
            for rec in recommendations:
                with st.expander(f"üî¥ {rec['title']}" if rec['severity'] == 'high' else 
                              f"üü† {rec['title']}" if rec['severity'] == 'medium' else 
                              f"üîµ {rec['title']}", expanded=True):
                    
                    st.markdown(f"**üìä Diagn√≥stico:** {rec['diagnosis']}")
                    
                    st.markdown("**üõ† A√ß√µes Recomendadas:**")
                    for action in rec['actions']:
                        st.markdown(f"- {action}")
                    
                    cols = st.columns(2)
                    with cols[0]:
                        st.metric("üìà Impacto Esperado", rec['expected_impact'])
                    with cols[1]:
                        st.metric("‚è± Prazo Estimado", rec['timeframe'])
                    
                    if rec['severity'] == 'high':
                        st.error("Prioridade m√°xima - resolver imediatamente")
                    elif rec['severity'] == 'medium':
                        st.warning("Prioridade m√©dia - resolver nesta semana")
                    else:
                        st.info("Prioridade baixa - considerar no pr√≥ximo ciclo")
            
            # Plano de a√ß√£o executivo
            st.markdown("### üöÄ Plano de A√ß√£o Priorit√°rio")
            action_plan = pd.DataFrame([
                {
                    'Prioridade': 'Alta' if r['severity'] == 'high' else 'M√©dia' if r['severity'] == 'medium' else 'Baixa',
                    'A√ß√£o': r['actions'][0],
                    'Respons√°vel': 'Equipe de Criativos' if 'criativo' in r['title'].lower() else 'Gestor de Tr√°fego',
                    'Prazo': r['timeframe']
                }
                for r in recommendations
            ])
            st.dataframe(action_plan.sort_values('Prioridade'), hide_index=True, use_container_width=True)

    with tab5:
    # Verifica se demographics existe e √© uma lista
        if demographics and isinstance(demographics, list):
        # Filtra apenas itens com age e gender
            valid_demographics = [d for d in demographics if 'age' in d and 'gender' in d]
        
            if valid_demographics:
                show_demographic_analysis(valid_demographics)
            else:
                st.warning("Dados demogr√°ficos n√£o cont√™m informa√ß√µes de idade e g√™nero.")
        else:
            st.warning("Dados demogr√°ficos n√£o dispon√≠veis para este an√∫ncio.")

    # Se√ß√£o de an√°lise demogr√°fica
    if demographics:
        st.markdown("### üë• Demografia do P√∫blico")
        
        # Separa dados por age/gender e country
        age_gender_data = [d for d in demographics if 'age' in d and 'gender' in d]
        country_data = [d for d in demographics if 'country' in d]
        
        if age_gender_data:
            df_age_gender = pd.DataFrame([
                {
                    'age': d.get('age', 'N/A'),
                    'gender': d.get('gender', 'N/A'),
                    'impressions': safe_int(d.get('impressions', 0)),
                    'clicks': safe_int(d.get('clicks', 0)),
                    'spend': safe_float(d.get('spend', 0)),
                    'conversions': safe_int(d.get('conversions', 0))
                }
                for d in age_gender_data
            ])
            
            # Calcula m√©tricas derivadas
            df_age_gender['CTR'] = df_age_gender['clicks'] / df_age_gender['impressions'].replace(0, 1) * 100
            df_age_gender['CPM'] = (df_age_gender['spend'] / df_age_gender['impressions'].replace(0, 1)) * 1000
            
            st.markdown("#### Distribui√ß√£o por Idade e G√™nero")
            pivot_age_gender = df_age_gender.groupby(['age', 'gender'])['impressions'].sum().unstack()
            st.plotly_chart(
                px.bar(pivot_age_gender, barmode='group', 
                      labels={'value': 'Impress√µes', 'age': 'Faixa Et√°ria'},
                      title='Impress√µes por Faixa Et√°ria e G√™nero'),
                use_container_width=True
            )
        
        if country_data:
            df_country = pd.DataFrame([
                {
                    'country': d.get('country', 'N/A'),
                    'impressions': safe_int(d.get('impressions', 0)),
                    'clicks': safe_int(d.get('clicks', 0)),
                    'spend': safe_float(d.get('spend', 0)),
                    'conversions': safe_int(d.get('conversions', 0))
                }
                for d in country_data
            ])
            
            df_country['CPM'] = (df_country['spend'] / df_country['impressions'].replace(0, 1)) * 1000
            
            st.markdown("#### Distribui√ß√£o por Pa√≠s")
            country_dist = df_country.groupby('country')['impressions'].sum().nlargest(10)
            st.plotly_chart(
                px.pie(country_dist, values='impressions', names=country_dist.index,
                      title='Top 10 Pa√≠ses por Impress√µes'),
                use_container_width=True
            )
    
    # Chamada para a nova an√°lise estrat√©gica
    generate_strategic_analysis(details, insights, demographics, temporal_data)
    
    # Se√ß√£o de recomenda√ß√µes (mantida para compatibilidade)
    st.markdown("### üí° Recomenda√ß√µes de Otimiza√ß√£o")
    
    recommendations = generate_performance_recommendations(insights, temporal_data)
    
    if not recommendations:
        st.success("‚úÖ Seu an√∫ncio est√° performando dentro ou acima dos benchmarks!")
        st.write("A√ß√µes recomendadas para manter o bom desempenho:")
        st.write("- Continue monitorando as m√©tricas regularmente")
        st.write("- Teste pequenas varia√ß√µes para otimiza√ß√£o cont√≠nua")
        st.write("- Considere aumentar o or√ßamento para escalar")
    else:
        for rec in recommendations:
            if rec['type'] == 'error':
                st.error(f"#### {rec['title']}: {rec['message']}")
            elif rec['type'] == 'warning':
                st.warning(f"#### {rec['title']}: {rec['message']}")
            else:
                st.success(f"#### {rec['title']}: {rec['message']}")
            
            st.write("**A√ß√µes recomendadas:**")
            for action in rec['actions']:
                st.write(f"- {action}")
    
    # Se√ß√£o de pr√≥ximos passos
    st.markdown("### üöÄ Pr√≥ximos Passos")
    st.write("1. **Implemente as mudan√ßas sugeridas** de forma gradual")
    st.write("2. **Monitore os resultados** diariamente por 3-5 dias")
    st.write("3. **Documente os aprendizados** para cada varia√ß√£o testada")
    st.write("4. **Escalone o que funciona** e pause o que n√£o performa")
    
    if temporal_data is not None:
        st.download_button(
            label="üì• Baixar Dados Completos",
            data=temporal_data.to_csv(index=False).encode('utf-8'),
            file_name=f"dados_anuncio_{details['id']}.csv",
            mime='text/csv'
        )

# ==============================================
# AN√ÅLISE ESTRAT√âGICA AVAN√áADA
# ==============================================

def generate_strategic_analysis(ad_details, insights, demographics, temporal_data):
    """Gera uma an√°lise estrat√©gica completa com recomenda√ß√µes baseadas em dados"""
    
    # C√°lculos preliminares com prote√ß√£o contra divis√£o por zero
    ctr = safe_float(insights.get('ctr', 0)) * 100 if safe_float(insights.get('impressions', 0)) > 0 else 0
    clicks = safe_float(insights.get('clicks', 0))
    conversions = safe_float(insights.get('conversions', 0))
    spend = safe_float(insights.get('spend', 0))
    impressions = safe_float(insights.get('impressions', 0))
    
    conversion_rate = (conversions / clicks) * 100 if clicks > 0 else 0
    cost_per_conversion = spend / conversions if conversions > 0 else 0
    cpm = (spend / impressions) * 1000 if impressions > 0 else 0
    cpc = spend / clicks if clicks > 0 else 0
    
    # Benchmarks do setor (podem ser ajustados conforme o objetivo da campanha)
    benchmarks = {
        'ctr': 2.0,
        'conversion_rate': 3.0,
        'cost_per_conversion': 50.0,
        'cpm': 10.0,
        'cpc': 1.5
    }
    
    # An√°lise de frequ√™ncia (se houver dados temporais)
    freq_mean = temporal_data['frequency'].mean() if temporal_data is not None else 0
    
    with st.expander("üîç An√°lise Estrat√©gica Completa", expanded=True):
        
        # Se√ß√£o 1: Diagn√≥stico de Performance
        st.subheader("üìä Diagn√≥stico de Performance")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("CTR", f"{ctr:.2f}%", 
                     delta=f"{'‚Üë' if ctr > benchmarks['ctr'] else '‚Üì'} vs benchmark {benchmarks['ctr']}%",
                     delta_color="inverse")
        
        with col2:
            st.metric("Taxa de Convers√£o", f"{conversion_rate:.2f}%",
                     delta=f"{'‚Üë' if conversion_rate > benchmarks['conversion_rate'] else '‚Üì'} vs benchmark {benchmarks['conversion_rate']}%",
                     delta_color="inverse")
        
        with col3:
            st.metric("Custo por Convers√£o", f"R${cost_per_conversion:.2f}",
                     delta=f"{'‚Üì' if cost_per_conversion < benchmarks['cost_per_conversion'] else '‚Üë'} vs benchmark R${benchmarks['cost_per_conversion']}",
                     delta_color="inverse")
        
        # Se√ß√£o 2: Pontos Fortes Identificados
        st.subheader("‚úÖ Pontos Fortes Identificados")
        
        strengths = []
        
        # Identificar pontos fortes com base nos dados
        if ctr > benchmarks['ctr'] * 1.2:
            strengths.append(f"CTR excelente ({ctr:.2f}%) - {ctr/benchmarks['ctr']:.1f}x acima da m√©dia")
        
        if conversion_rate > benchmarks['conversion_rate'] * 1.2:
            strengths.append(f"Taxa de convers√£o alta ({conversion_rate:.2f}%) - Efici√™ncia no funnel")
        
        if cost_per_conversion < benchmarks['cost_per_conversion'] * 0.8:
            strengths.append(f"Custo por convers√£o baixo (R${cost_per_conversion:.2f}) - Efici√™ncia de gastos")
        
        if demographics:
            # Verificar se h√° segmentos com performance excepcional
            df_age_gender = pd.DataFrame([
                {
                'age': d.get('age', 'N/A'),
                'gender': d.get('gender', 'N/A'),
                'ctr': (safe_int(d.get('clicks', 0)) / safe_int(d.get('impressions', 1)) * 100) if safe_int(d.get('impressions', 0)) > 0 else 0,
                'conversion_rate': (safe_int(d.get('conversions', 0)) / safe_int(d.get('clicks', 1)) * 100) if safe_int(d.get('clicks', 0)) > 0 else 0,
                'cpa': safe_int(d.get('spend', 0)) / max(1, safe_int(d.get('conversions', 0)))
            }
            for d in demographics if 'age' in d and 'gender' in d
        ])
            
            if not df_age_gender.empty:
             top_segment = df_age_gender.loc[df_age_gender['ctr'].idxmax()]
            if top_segment['ctr'] > benchmarks['ctr'] * 1.5:
                strengths.append(f"Segmento de alto desempenho: {top_segment['gender']} {top_segment['age']} (CTR: {top_segment['ctr']:.2f}%)")

        if strengths:
            for strength in strengths:
                st.success(f"- {strength}")
        else:
            st.info("Nenhum ponto forte excepcional identificado. Foque em otimiza√ß√µes b√°sicas.")
        
        # Se√ß√£o 3: Oportunidades de Melhoria
        st.subheader("üîß Oportunidades de Melhoria")
        
        improvements = []
        
        if ctr < benchmarks['ctr'] * 0.8:
            improvements.append(f"CTR baixo ({ctr:.2f}%) - Testar novos criativos e chamadas para a√ß√£o")
        
        if conversion_rate < benchmarks['conversion_rate'] * 0.8:
            improvements.append(f"Taxa de convers√£o baixa ({conversion_rate:.2f}%) - Otimizar landing page e jornada do usu√°rio")
        
        if cost_per_conversion > benchmarks['cost_per_conversion'] * 1.2:
            improvements.append(f"Custo por convers√£o alto (R${cost_per_conversion:.2f}) - Refinar p√∫blico-alvo e segmenta√ß√£o")
        
        if freq_mean > 3.5:
            improvements.append(f"Frequ√™ncia alta ({freq_mean:.1f}x) - Risco de satura√ß√£o, considere atualizar criativos ou expandir p√∫blico")
        
        if improvements:
            for improvement in improvements:
                st.error(f"- {improvement}")
        else:
            st.success("Performance geral dentro ou acima dos benchmarks. Considere escalar campanhas bem-sucedidas.")
        
        # Se√ß√£o 4: Recomenda√ß√µes Espec√≠ficas por Tipo de An√∫ncio
        st.subheader("üéØ Recomenda√ß√µes Espec√≠ficas")
        
        # Baseado no tipo de campanha (do adset ou campaign)
        campaign_objective = ad_details.get('campaign_objective', '').lower()
        
        if 'conversion' in campaign_objective:
            st.write("""
            **Para campanhas de convers√£o:**
            - Teste diferentes CTAs na landing page
            - Implemente eventos de convers√£o secund√°rios
            - Otimize para p√∫blicos similares a convertidos
            """)
        elif 'awareness' in campaign_objective:
            st.write("""
            **Para campanhas de awareness:**
            - Aumente o alcance com formatos de v√≠deo
            - Utilize o recurso de expans√£o de p√∫blico
            - Monitore a frequ√™ncia para evitar satura√ß√£o
            """)
        else:
            st.write("""
            **Recomenda√ß√µes gerais:**
            - Teste pelo menos 3 varia√ß√µes de criativos
            - Experimente diferentes hor√°rios de veicula√ß√£o
            - Ajuste bids conforme performance por segmento
            """)
        
        # Se√ß√£o 5: Plano de A√ß√£o Priorizado
        st.subheader("üìÖ Plano de A√ß√£o Priorizado")
        
        action_plan = []
        
        # Prioridade 1: CTR baixo
        if ctr < benchmarks['ctr'] * 0.8:
            action_plan.append({
                "Prioridade": "Alta",
                "A√ß√£o": "Otimizar CTR",
                "Tarefas": [
                    "Criar 3 varia√ß√µes de imagens/thumbnails",
                    "Testar diferentes textos principais (max 125 chars)",
                    "Posicionar CTA mais destacado"
                ],
                "Prazo": "3 dias",
                "M√©trica Esperada": f"Aumentar CTR para ‚â• {benchmarks['ctr']}%"
            })
        
        # Prioridade 2: Convers√£o baixa
        if conversion_rate < benchmarks['conversion_rate'] * 0.8:
            action_plan.append({
                "Prioridade": "Alta",
                "A√ß√£o": "Melhorar Taxa de Convers√£o",
                "Tarefas": [
                    "Otimizar landing page (velocidade, design, CTA)",
                    "Implementar pop-ups inteligentes",
                    "Simplificar formul√°rios de convers√£o"
                ],
                "Prazo": "5 dias",
                "M√©trica Esperada": f"Aumentar convers√£o para ‚â• {benchmarks['conversion_rate']}%"
            })
        
        # Prioridade 3: Frequ√™ncia alta
        if freq_mean > 3.5:
            action_plan.append({
                "Prioridade": "M√©dia",
                "A√ß√£o": "Reduzir Satura√ß√£o",
                "Tarefas": [
                    "Atualizar criativos principais",
                    "Expandir p√∫blico-alvo",
                    "Ajustar or√ßamento por hor√°rio"
                ],
                "Prazo": "2 dias",
                "M√©trica Esperada": f"Reduzir frequ√™ncia para ‚â§ 3x"
            })
        
        # Se n√£o houver problemas cr√≠ticos, sugerir otimiza√ß√µes padr√£o
        if not action_plan:
            action_plan.append({
                "Prioridade": "Otimiza√ß√£o",
                "A√ß√£o": "Escalonar Performance",
                "Tarefas": [
                    "Aumentar or√ßamento em 20% para melhores performers",
                    "Criar p√∫blicos lookalike baseados em convertidos",
                    "Testar novos formatos criativos"
                ],
                "Prazo": "Cont√≠nuo",
                "M√©trica Esperada": "Manter ROAS ‚â• 2.0"
            })
        
        st.table(pd.DataFrame(action_plan))
        
        # Se√ß√£o 6: Proje√ß√£o de Resultados
        st.subheader("üìà Proje√ß√£o de Resultados")
        
        if temporal_data is not None:
            # Calcular crescimento m√©dio di√°rio
            last_7_days = temporal_data.tail(7)
            growth_rates = {
                'impressions': last_7_days['impressions'].pct_change().mean() * 100,
                'ctr': last_7_days['ctr'].pct_change().mean() * 100,
                'conversions': last_7_days['conversions'].pct_change().mean() * 100
            }
            
            projections = {
                "Cen√°rio": ["Conservador", "Otimista", "Pessimista"],
                "Impress√µes (7 dias)": [
                    f"{impressions * 0.9:,.0f}",
                    f"{impressions * 1.3:,.0f}",
                    f"{impressions * 0.7:,.0f}"
                ],
                "Convers√µes (7 dias)": [
                    f"{conversions * 0.9:,.0f}",
                    f"{conversions * 1.5:,.0f}",
                    f"{conversions * 0.6:,.0f}"
                ],
                "Investimento": [
                    f"R${spend * 0.9:,.2f}",
                    f"R${spend * 1.5:,.2f}",
                    f"R${spend * 0.7:,.2f}"
                ],
                "ROI Esperado": [
                    f"{(conversions * 0.9 * 100) / max(1, spend * 0.9):.1f}%",
                    f"{(conversions * 1.5 * 100) / max(1, spend * 1.5):.1f}%",
                    f"{(conversions * 0.6 * 100) / max(1, spend * 0.7):.1f}%"
                ]
            }
            
            st.table(pd.DataFrame(projections))
            
            st.caption(f"*Baseado em crescimento m√©dio atual: CTR {growth_rates['ctr']:.1f}% ao dia, Convers√µes {growth_rates['conversions']:.1f}% ao dia*")
        
        # Se√ß√£o 7: Checklist de Implementa√ß√£o
        st.subheader("‚úÖ Checklist de Implementa√ß√£o")
        
        checklist_items = [
            "Definir KPI principal e secund√°rios",
            "Configurar eventos de convers√£o no Pixel",
            "Estabelecer or√ßamento di√°rio m√≠nimo para testes",
            "Criar pelo menos 3 varia√ß√µes de criativos",
            "Segmentar p√∫blicos por desempenho hist√≥rico",
            "Configurar relat√≥rios autom√°ticos de performance",
            "Estabelecer frequ√™ncia de an√°lise (recomendado di√°ria)"
        ]
        
        for item in checklist_items:
            st.checkbox(item, key=f"check_{hashlib.md5(item.encode()).hexdigest()}")

# ==============================================
# FUN√á√ÉO PRINCIPAL SIMPLIFICADA
# ==============================================

def main():
    st.title("üöÄ Meta Ads Analyzer Pro")
    st.markdown("""
    **Ferramenta avan√ßada para an√°lise de desempenho de an√∫ncios no Meta (Facebook e Instagram)**
    """)
    
    # Mostra instru√ß√µes de como obter as credenciais
    with st.expander("‚ÑπÔ∏è Como obter minhas credenciais?", expanded=False):
        st.markdown("""
        Para usar esta ferramenta, voc√™ precisar√° das seguintes credenciais da API do Meta:
        
        1. **App ID** e **App Secret**:  
           - V√° para [Facebook Developers](https://developers.facebook.com/)  
           - Selecione seu aplicativo ou crie um novo  
           - Encontre essas informa√ß√µes em "Configura√ß√µes" > "B√°sico"
        
        2. **Access Token**:  
           - No mesmo painel, v√° para "Ferramentas" > "Explorador de API"  
           - Selecione seu aplicativo  
           - Gere um token de acesso de longo prazo com permiss√µes ads_management
        
        3. **Ad Account ID**:  
           - V√° para [Meta Ads Manager](https://adsmanager.facebook.com/)  
           - Selecione sua conta de an√∫ncios  
           - O ID estar√° na URL (ap√≥s /act_) ou em "Configura√ß√µes da Conta"
        
        *Observa√ß√£o: Suas credenciais s√£o usadas apenas localmente e n√£o s√£o armazenadas.*
        """)
    
    # Menu simplificado - apenas a op√ß√£o de an√°lise via API
    st.sidebar.info("Acesse dados completos dos seus an√∫ncios via API")
    show_real_analysis()

if __name__ == "__main__":
    main()
